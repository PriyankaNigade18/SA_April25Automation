

Selenium WebDriver
------------------
Selenium WebDriver is an interface
Selenium WebDriver is an API for webui automation test
---------------------------------------------------------------
Selenium setup
------------
1.Using java project
--------------------------
1.create new java project
2.download selenium java library(client library) https://www.selenium.dev
3.right click on project-->Build path--->configure build path--->library-->
click on class path--->add external library-->select the file and add
4.file will be attached in java project under reference libraries

2.Using Maven Project
-------------------------
What is Maven
--------------------
Maven is build management and project management tool/framework
Maven followed by developers and testers both

Maven project have its configuration file: POM.xml
-------------------------------------------------
POM stands for Project Object Model
this is file which is completed configuration for maven project

all required dependecies and plugins are part of pom.xml file

--------------------------------
What is Dependency
-----------------------
It ia library/executable file

POM structure
-------------------
<project>

<dependencies>

<dependecy>Selenium java</dependency>
<dependecy>testng</dependency>
<dependecy>cucumber</dependency>

</dependencies>

</project>

------------------------------------
Maven is developed by Apache foundation
--------------------------------
Repository(Storage)
----------------------
Maven support two reporsitories
-------------
1.Local repo
---------------------
In local machine-->user-->.m2 folder

2.Remote/share repo
-------------------------
mvnrepository.com

=========================================
Selenium Exception
----------------------
1.For Wrong URl: InvalidArgumentException: invalid argument
2.For multipleclassname: InvalidSelectorException: Compound class names not permitted
3.When findElement() fail to identify webelement: NoSuchElementExeception




===============================================
WebDriver Browser Based commands/methods
---------------------------------------
1.get(url): open application
2.getTitle(): get the title of current page
3.getCurrentUrl(): get the current url of page
4.getPageSource(): get the page source

Window handling
----------------
5.getWindowHandle()
6.getWindowHandles()

7.close(): close current open window
8.quit(): close all open windows by selenium

Navigation Commands
-----------------------
Selenium provided Navigation ineterface 

1.to(url): Navigate to any other application
-----------------------
driver.navigate().to(url);

2.back()
----------------
driver.navigate().back();

3.forward()
----------------
driver.naviagte().forward();

4.refresh(): reload the page
---------------------------
driver.navigate().refresh();


=============================================================

WebElement
-----------------
Every GUI element(textbox,link,button...etc) is called webelement

To Interact these element Selenium provides one interface that is WebElement

1.Identify WebElement from webpage
2.Perform action on WebElement

How selenium identify any webelement?
-----------------------------------
Selenium identify webelement using Locators

what is Locator?
---------------------
Locator is address of webelement form that webpage

Selenium support total 8 locators
--------------------------------
1.By id (primary)
2.By name
3.By className
4.By linkText
5.By partialLinkText
6.By tagName

Dynamic Locators
-----------------
7.By cssSelector
8.By xpath

Selenium 4 version supports relative locators
======================================
leftOf(),rightOf(),near(),above(),below()
=============================================

To Identify WebElement selenium has two methods
--------------------------------------------
1.findElement()
---------------
-findElement() identify single webElement
-this method returns single WebElement interface object
-if element is not found this method throws exception NoSuchElementException


2.findElements()
------------------
-findElements() identify multiple similar elements
-this method return List<WebElement>
-if element is not found this method return empty list but not exception



=================================================
Actions on WebElement
======================
textbox,search box--->enter the data/text--->sendKeys("data",Keys.Keyboard action)
To clear the text---->clear()
button,link,checkbox,radio--->click ----->click()


WebElement Validation Methods
===============================
1.isEnabled()
2.isDisplayed()
3.isSelected()


========================
How to Automate any Hyper link'
-----------------------------

<a id="SignIn" href="login.html">Sign In</a>
							<a>  link text </a>
							
1.By linkText(exact match/full text)

driver.finElement(By.linkText("Sign In")).click();

2.By partialLinkText(partial link text)

driver.findElement(By.partialLinkText("In")).click();

---------------------------------

By className
===================
<button class="btn btn-default btn-primary">Submit</button>


class="btn btn-default btn-primary"

		c1     c2         c3
		
	driver.findElement(By.className("btn btn-default btn-primary")).click();	
InvalidSelectorException: Compound class names not permitted

Solution
--------------
1.identify unique classname
goto finder(inspect window+ctrl+f)

2.do use unique class name in script

driver.findElement(By.className("btn-primary")).click();
========================================================
By tagName
===============

Number of inputboxes
Number of Links
Number of images

Synchronization Issue in Selenium
====================================
While automation application needs some extra time to load the elements

Whenever there is time mapping issue in between application and tool then you will 
face synchronization issue in selenium.


Selenium support two dynamic waits
-----------------------
1.Implicit wait
------------------
Implicit wait is global wait 
Applicable to entire script(all elements)
add implicit wait always after driver initialize

Syntax:
=============
driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));


2.Explicit Wait
----------------
-Explicit wait is applicable to single webelement only based on validation condition

we can implement Explicit wait using two classes
-----------------
1.WebDriverWait class
2.FluentWait Class

WebDriverWait(c) extends FluentWait(c) implements Wait(I)
==============================================================

Special WebElement methods
======================
1.getDOMAttribute(attribute name)
----------------------------------
this method return you attribite value


2.getText()
---------------------------
- this method get the visible text of element
- any html inner text also get by this method

=================================================================
Dynamic Locators
-----------------
1.By cssSelector
2.By xpath

CssSelector
=====================

cssSelector is locator to identify webelement based on css property
cssSelector can travel in one direction(parent node to child node)
cssSelector is faster than xpath

#SignIn

1.tagname with id
------------------
Syntax
=======
tagname#id

<a id="SignIn">Sign In</a>

a#SignIn  1 of 1 match


2.tagname with attribute
--------------------------
Syntax:
===========
tagname[attribute='value']

input[placeholder='Enter email']...... 1 of 1 match

3.tagname with className
----------------------------
Syntax:
=============
tagname.className

<button class="btn btn-default btn-primary" >Submit</button>

button.btn.btn-default.btn-primary   1 of 1 match

or

button.btn-primary   1 of 1 match



4.tagname witn id,classname and attribute
--------------------------------------------
Syntax
==========
tagname#id.className[attribute='value']


CssSelector with Special symbole
------------------------------
$value:endsWith(suffix value)
---------------------------------
id="twotabsearchtextbox"
input[id$='textbox']

^value: startswith(prefix value)
--------------------------------
id="twotabsearchtextbox"
input[id^='twotab'] 1 of 1 match

*value=contains(partial value)
-------------------------------------
id="twotabsearchtextbox"

input[id*='searchtext'] 1 of 1 match
================================================

Form parent node to child node
-----------------------------------
parent tag>child tagname

sc-ace17a57-0 sc-63e0c791-1 kTjuIu dRHBZS

ul.dRHBZS>li>a>span

============================================
cssSelector with indexing
---------------------------
nth-child(index)
=================================
parent tag>child tag:nth-child(index)

=======================================================
8. By xpath
====================
xpath is path of Webelement from any html or xml document
Xpath identify elements directly form DOM(Document object model)
Xpath can travel from parent to child and child to Parent
Xpath supports methods
Xpath support xpath Axies
-------------------------------html DOM--------------------
<html>------------------root node
<head>
</head>

<body>
<input>
<div>-------------Webelement
<a>
<button>
</body>
</html>

==========================================================
Xpath Types
================
1.Absolute xpath(Full xpath)
--------------------
-Absolute xpathn identify element form the root node
-Absolute xpath starts with '/'

/html/body/div[2]/div/div/div/div[2]/div/form/div[1]/input

2.Relative xpath(partial xpath)
--------------------
-Relative xpath identiy element based on relative property
-Relative xpath starts with '//'

//*[@id="input-email"]

* any tag 

Syntax:
==============
//tagname[@attribute='value']

==========================================================

Xpath with Operators


Xpath with indexing


Xpath Methods


Xpath Axies


=============================================================


















































































